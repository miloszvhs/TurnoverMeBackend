// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TurnoverMeBackend.Infrastructure.DAL;

#nullable disable

namespace TurnoverMeBackend.Infrastructure.Migrations
{
    [DbContext(typeof(InvoicesDbContext))]
    [Migration("20250206193551_AddCircuits")]
    partial class AddCircuits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.InvoiceNumber", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InvoiceNumbers");
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalGrossAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalNetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceBuyer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("InvoiceBuyer");
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceCircuit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceCircuit");
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoicePositionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("NetValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitNetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoicePositionItem");
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceReceiver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("InvoiceReceiver");
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceSeller", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("InvoiceSeller");
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceBuyer", b =>
                {
                    b.HasOne("TurnoverMeBackend.Domain.Entities.Invoices.Invoice", null)
                        .WithOne("Buyer")
                        .HasForeignKey("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceBuyer", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TurnoverMeBackend.Domain.Entities.ValueObjects.InvoiceAddressValueObject", "AddressValueObject", b1 =>
                        {
                            b1.Property<string>("InvoiceBuyerId")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("FlatNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FlatNumber");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("InvoiceBuyerId");

                            b1.ToTable("InvoiceBuyer");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceBuyerId");
                        });

                    b.Navigation("AddressValueObject")
                        .IsRequired();
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceCircuit", b =>
                {
                    b.HasOne("TurnoverMeBackend.Domain.Entities.Invoices.Invoice", null)
                        .WithMany("Circuits")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoicePositionItem", b =>
                {
                    b.HasOne("TurnoverMeBackend.Domain.Entities.Invoices.Invoice", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceReceiver", b =>
                {
                    b.HasOne("TurnoverMeBackend.Domain.Entities.Invoices.Invoice", null)
                        .WithOne("Receiver")
                        .HasForeignKey("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceReceiver", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TurnoverMeBackend.Domain.Entities.ValueObjects.InvoiceAddressValueObject", "AddressValueObject", b1 =>
                        {
                            b1.Property<string>("InvoiceReceiverId")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("FlatNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FlatNumber");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("InvoiceReceiverId");

                            b1.ToTable("InvoiceReceiver");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceReceiverId");
                        });

                    b.Navigation("AddressValueObject")
                        .IsRequired();
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceSeller", b =>
                {
                    b.HasOne("TurnoverMeBackend.Domain.Entities.Invoices.Invoice", null)
                        .WithOne("Seller")
                        .HasForeignKey("TurnoverMeBackend.Domain.Entities.Invoices.InvoiceSeller", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TurnoverMeBackend.Domain.Entities.ValueObjects.InvoiceAddressValueObject", "AddressValueObject", b1 =>
                        {
                            b1.Property<string>("InvoiceSellerId")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("FlatNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FlatNumber");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("InvoiceSellerId");

                            b1.ToTable("InvoiceSeller");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceSellerId");
                        });

                    b.Navigation("AddressValueObject")
                        .IsRequired();
                });

            modelBuilder.Entity("TurnoverMeBackend.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.Navigation("Buyer")
                        .IsRequired();

                    b.Navigation("Circuits");

                    b.Navigation("Items");

                    b.Navigation("Receiver");

                    b.Navigation("Seller")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
